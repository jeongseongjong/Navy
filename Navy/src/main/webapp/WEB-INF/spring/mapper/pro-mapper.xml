<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.biz.navy.dao.ProductDao">

	<!-- 구글 차트 그리기 관련 SQL문 들 -->
		<select id="countChange" resultType="int">
			SELECT COUNT(*) FROM (
			    SELECT SUBSTR(ch_date,1,7), sum(ch_price) 
			    FROM tbl_inventory_changes 
			    GROUP BY SUBSTR(ch_date,1,7)
			)
		</select>
		
		<select id="selectChanges" resultType="inventoryChangeVO">
			SELECT SUBSTR(ch_date,1,7) AS ch_date, 
					sum(ch_price) AS ch_price 
				FROM tbl_inventory_changes 
				GROUP BY SUBSTR(ch_date,1,7)
				ORDER BY SUBSTR(ch_date,1,7)
		</select>

	<!-- 구글 차트 그리기 관련 SQL문 들 끝 -->
	<!-- 검색 & 페이징 관련 SQL문 들 -->
	<select id="countSearch" resultType="Long">
		SELECT COUNT(*) FROM tbl_product
		<where>
			<foreach collection="searchList" item="search" separator="OR">
				p_name LIKE '%' || #{search,jdbcType=VARCHAR} || '%'
			</foreach>
		</where>
		
	</select>
	
	<select id="findBySearchNameAndPaging" resultMap="productAndSize">
		SELECT * FROM
		(
			SELECT /*+ FIRST_ROWS 100 */ ROWNUM AS NUM, IP.* FROM
			(
				SELECT /*+ INDEX_DESC(P) FIRST_ROWS */ * FROM tbl_product P
				<where>
					<foreach collection="searchList" item="search" separator="OR">
						p_name LIKE '%' || #{search,jdbcType=VARCHAR} || '%'		
					</foreach>
				</where>
			) IP
			WHERE ROWNUM &lt; = #{pageVO.limit,jdbcType=VARCHAR}
		) 
		WHERE NUM &gt; = #{pageVO.offset,jdbcType=VARCHAR}	
	
	
	</select>


	<select id="countAll" resultType="Long">
		SELECT COUNT(*) FROM tbl_product
	</select>


	<select id="selectAllPaging" resultMap="productAndSize">
		SELECT * FROM
		(
			SELECT /*+ FIRST_ROWS_100 */ ROWNUM AS NUM, IP.* FROM
			(
				SELECT /*+ INDEX_DESC(P) FIRST_ROWS */ * FROM tbl_product P
			) IP
			WHERE ROWNUM &lt; = #{limit,jdbcType=VARCHAR}
		)
		WHERE NUM &gt; = #{offset,jdbcType=VARCHAR}
	</select>
	
	<!-- 
	result 태그 
	property는 VO의 값
	column은 테이블에 있는 칼럼
	
	collection 태그
	property는 productVO의 값
	column은 보내줄 값인데 select문의 where 조건 안의 #{}값과 일치시키기
	ofType은 받을 VO 타입
	select는 가져올 셀렉트문
	 -->
	<resultMap type="productVO" id="productAndSize">
		<id column="id" property="id"/>
		<result property="p_code" column="p_code"/>
		<collection property="sizeList" column="p_code"
				ofType="sizeVO"	select="selectSize"	/>
	</resultMap>

	<!-- 사이즈 조회 -->
	<select id="selectSize" resultType="sizeVO" resultMap="sizeAndColor">
		SELECT * FROM tbl_size WHERE s_p_code = #{p_code}
	</select>

	<!-- 사이즈테이블에서 컬러 테이블 조회 -->
	<resultMap type="sizeVO" id="sizeAndColor">
		<id column="id" property="id"/>
		<result property="s_code" column="s_code"/>
		<collection property="colorList" column="s_code"
			ofType="colorVO" select="selectColor"
		/>
	</resultMap>
	
	<!-- 색상 조회 -->
	<select id="selectColor" resultType="colorVO">
		SELECT * FROM tbl_color WHERE c_s_code = #{s_code}
	</select>
	
	<select id="selectColorAll" resultType="inventoryVO">
		SELECT * FROM
			(
				SELECT /*+ FIRST_ROWS_100 */ ROWNUM AS NUM, IP.* FROM
				(
					SELECT /*+ INDEX_DESC(P) FIRST_ROWS */ * FROM 
					(
						SELECT P.p_code, P.p_name, P.p_price,
							S.s_code, S.s_size,
							C.c_code, C.c_color, C.c_qty,
							P.p_qty
						FROM tbl_product P,tbl_size S,tbl_color C
					    WHERE P.p_code = S.s_p_code 
					    	AND S.s_code = C.c_s_code
					    ORDER BY P.p_code DESC
					)P
				) IP
				WHERE ROWNUM &lt; = #{limit,jdbcType=VARCHAR}
			)
		WHERE NUM &gt; = #{offset,jdbcType=VARCHAR}

	</select>
	
	<!-- 재고조회에서 페이징위해 만든 SQL문 -->
	<select id="countColorAll" resultType="Long">
		SELECT COUNT(*) FROM tbl_color
	</select>
	
	<select id="countStockSearch" resultType="Long">
		SELECT COUNT(*) FROM 
		(
			SELECT P.p_code, P.p_name, P.p_price,
				S.s_code, S.s_size,
				C.c_code, C.c_color, C.c_qty,
				P.p_qty
			FROM tbl_product P,tbl_size S,tbl_color C
		    WHERE P.p_code = S.s_p_code 
		    	AND S.s_code = C.c_s_code
		)
		<where>
			<foreach collection="searchList" item="search" separator="OR">
				p_name LIKE '%' || #{search,jdbcType=VARCHAR} || '%'
			</foreach>
		</where>
	</select>
	
	<select id="findStockBySearchNameAndPaging" resultType="inventoryVO">
		SELECT * FROM
			(
				SELECT /*+ FIRST_ROWS_100 */ ROWNUM AS NUM, IP.* FROM
				(
					SELECT /*+ INDEX_DESC(P) FIRST_ROWS */ * FROM 
					(
						SELECT P.p_code, P.p_name, P.p_price,
							S.s_code, S.s_size,
							C.c_code, C.c_color, C.c_qty,
							P.p_qty
						FROM tbl_product P,tbl_size S,tbl_color C
					    WHERE P.p_code = S.s_p_code 
					    	AND S.s_code = C.c_s_code
					    ORDER BY P.p_code DESC
					)P
				<where>
					<foreach collection="searchList" item="search" separator="OR">
						p_name LIKE '%' || #{search,jdbcType=VARCHAR} || '%'		
					</foreach>
				</where>
				) IP
				WHERE ROWNUM &lt; = #{pageVO.limit,jdbcType=VARCHAR}
			)
		WHERE NUM &gt; = #{pageVO.offset,jdbcType=VARCHAR}
	</select>
	<insert id="insert" parameterType="productVO">
      INSERT INTO tbl_product(
      
      p_code,
      p_name,
      p_price,
      p_desc,
      p_image,
      p_size,
      p_color,
      p_date,
      p_time,
      p_qty
      
      ) VALUES (
      SEQ_PRODUCT.NEXTVAL,
      #{p_name},
      #{p_price},
      #{p_desc,jdbcType=VARCHAR},
      #{p_image,jdbcType=VARCHAR},
      #{p_size,jdbcType=VARCHAR},
      #{p_color,jdbcType=VARCHAR},
      #{p_date},
      #{p_time},
      #{p_qty,jdbcType=VARCHAR}
      )
      
   </insert>

	<insert id="insertWithSize" parameterType="list">
		INSERT INTO tbl_size(s_code, s_p_code, s_size)
		SELECT SEQ_SIZE.NEXTVAL, sub.* from(
		<foreach collection="list" item="sizeVO" separator="UNION ALL">
			SELECT
				#{sizeVO.s_p_code,jdbcType=VARCHAR},
				#{sizeVO.s_size,jdbcType=VARCHAR}
			FROM dual
		</foreach>
		) sub
		
	</insert>
	<!--  원본 백업  -->
	<insert id="insertWithSize2" parameterType="list">
		INSERT INTO tbl_size(s_code, s_p_code, s_size)
		SELECT SEQ_SIZE.NEXTVAL, sub.* from(
		<foreach collection="list" item="sizeVO" separator="UNION ALL">
			SELECT
				#{sizeVO.s_p_code,jdbcType=VARCHAR},
				#{sizeVO.s_size,jdbcType=VARCHAR}
			FROM dual
		</foreach>
		) sub
		
	</insert>
	
	<insert id="insertWithColor" parameterType="list">
		INSERT INTO tbl_color(c_code, c_s_code, c_color, c_qty)
		SELECT SEQ_COLOR.NEXTVAL, sub.* from(
		<foreach collection="list" item="color" separator="UNION ALL">
			SELECT
				#{color.c_s_code,jdbcType=VARCHAR},
				#{color.c_color,jdbcType=VARCHAR},
				#{color.c_qty,jdbcType=VARCHAR}
			FROM dual
		</foreach>
		) sub
		
	</insert>
	
	<insert id="insertWithImages" parameterType="list">
		INSERT INTO tbl_p_images(p_img_seq, p_img_p_code, p_img_origin_name, p_img_upload_name)
		SELECT SEQ_PRODUCT_IMAGE.NEXTVAL, sub.* from(
		<foreach collection="list" item="img" separator="UNION ALL">
			SELECT
				#{img.p_img_p_code,jdbcType=VARCHAR},
				#{img.p_img_origin_name,jdbcType=VARCHAR},
				#{img.p_img_upload_name,jdbcType=VARCHAR}
			FROM dual
		</foreach>
		) sub
	</insert>
	

	<update id="update" parameterType="productVO">
		UPDATE tbl_product SET
			p_name = #{p_name},
			p_price = #{p_price},
			p_desc = #{p_desc,jdbcType=VARCHAR},
			p_image = #{p_image,jdbcType=VARCHAR},
			p_qty = #{p_qty,jdbcType=VARCHAR}

		WHERE p_code = #{p_code}
	</update>
	
	<!-- 
	<update id="existing_update" parameterType="productUpdateVO">
				UPDATE tbl_color 
					SET (c_color, c_qty) = 
					<foreach collection="proUpdateList" item="pro" separator="">
					(
						#{pro.c_color,jdbcType=VARCHAR},
						#{pro.c_qty,jdbcType=VARCHAR}	
					)
					</foreach>
				WHERE  c_code IN (
					<foreach collection="proUpdateList" item="pro" separator=",">
						#{pro.c_code,jdbcType=VARCHAR}
					</foreach>
				
				)
	</update>
	 -->
	<update id="existing_update" parameterType="productUpdateVO">
				UPDATE tbl_color SET
					c_color = #{c_color,jdbcType=VARCHAR},
					c_qty = #{c_qty,jdbcType=VARCHAR}
				WHERE  
					c_code = #{c_code,jdbcType=VARCHAR}
	</update>
	
</mapper> 